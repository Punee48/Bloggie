@model Bloggie.Web.Models.ViewModels.BlogDetailsViewModels;
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<IdentityUser> signinUser;
@inject UserManager<IdentityUser> userManager;
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container my-6">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if(Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>
                <div class="mb-3">
                    @if (signinUser.IsSignedIn(User))
                    {
                        @if(Model.Liked)
                        {
                        <a style="cursor: pointer;">
                            <i class="bi bi-hand-thumbs-up-fill"></i>
                        </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor: pointer;">
                            <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }


                    }
                    <span id="totalLikeCount">@Model.TotalLikes</span> <text>likes</text>
                </div>
                <div class="d-flex mb-3">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>

                <img class="d-flex img-fluid mb-3" src="@Model.FeaturedImageURL">

                <div class="mb-3  blog-details-content">
                    @Html.Raw(Model.Content)
                </div>
            }
            else
            {
                <p>No blog post found!</p>
            }
        </div>
    </div>
</div>


@section Scripts{
    <script>
        const likeButton = document.getElementById('btnLike');
        const likeCountElement = document.getElementById('totalLikeCount');

        async function getTotalLikes() {
            fetch('/api/BlogPostLike/@Model?.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
            }).then(data => data.json()).then(result => likeCountElement.innerHTML = result);
        }
        

        async function addLikeBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    BlogPostId : '@Model.Id',
                    UserId: '@userManager.GetUserId(User)'
                })
                    }).then(() => {
                        likeButton.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                        likeButton.removeEventListener('click', addLikeBlog); 
        }) 
                    getTotalLikes();
        };


    likeButton.addEventListener('click', addLikeBlog);
    </script> 

};
